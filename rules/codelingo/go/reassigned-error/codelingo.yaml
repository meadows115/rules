funcs:
- name: compareFunc
  type: asserter
  body: |
    function (a, b) {
      return a < b;
    }
- name: threeComparison
  type: asserter
  body: |
    function (a, b, c) {
      return (a < b) && (a > c);
    }
tenets:
- name: reassigned-error
  actions:
      codelingo/docs:
        title: Check `err` Before Variable Re-Assignment
        body: | 
          When re-assigning a variable in Go, it is convention to check the `err` prior to
          doing so. First, check that the `err` is not equal to `nil` and then re-assign
          the variable to avoid a panic.

          ## Bad code
          ```golang
          \\ FileAppendOnly opens a file and appends an error code if the file is unable to be opened
          func setFileAppendOnly(filename string) error {
            file, err := os.Open("userdata.json")
            defer file.Close()
            err = file.Chmod(os.ModeAppend) // `err` not checked before re-assignment
            if err != nil { 
              return err
            }
            return nil
          }
          ```

          ## Good code
          ```golang
          // FileAppendOnly opens a file and appends an error code if the file is unable to be opened
          func FileAppendOnly(filename string) error {
            file, err := os.Open("userdata.json")
            if err != nil {
              return err
            }
            defer file.Close()
            err = file.Chmod(os.ModeAppend)
            if err != nil {
              return err
            }
            return nil
          }
          ```
    codelingo/review:
      comment: Check the `err` before variable re-assignment to avoid the program terminating with a panic.
  query: |
    import codelingo/ast/go
    go.block_stmt(depth = any):
      go.list:
        @review comment
        go.assign_stmt:
          sibling_order as so1
          go.lhs:
            go.ident:
              name == "err"
        go.assign_stmt:
          sibling_order as so2
          compareFunc(so1, so2)
          go.lhs:
            go.ident:
              name == "err"
        exclude:
          go.if_stmt:
            sibling_order as so3 
            threeComparison(so3, so2, so1)
            go.binary_expr(depth = any):
              go.ident:
                name == "err"
        exclude:
          go.expr_stmt:
            sibling_order as so4
            threeComparison(so4, so2, so1)
            go.call_expr:
              go.args:
                go.ident:
                  name == "err"
