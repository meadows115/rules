--- 
funcs: 
  - 
    body: |
        function (a, b) {
          return a < b;
        }
    name: compareFunc
    type: asserter
  - 
    body: |
        function (a, b, c) {
          return (a < b) && (a > c);
        }
    name: threeComparison
    type: asserter
tenets: 
  - 
    actions: 
      codelingo/docs: 
        body: |
            When re-assigning an `err` variable in Go, always check errors before 
            executing dependent code.
            
            ## Bad code
            ```golang
            // AppendFile appends text to the end of a file
            func AppendFile(path string, content []byte) error {
              file, err := os.OpenFile(path, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
              defer file.Close()
            
              _, err = file.Write(content)
              return err
            }
            ```
            
            ## Good code
            ```golang
            // AppendFile appends text to the end of a file
            func AppendFile(path string, content []byte) error {
              file, err := os.OpenFile(path, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
              if err != nil {
                return err
              }
              defer file.Close()
            
              _, err = file.Write(content)
              return err
            }
            ```
        title: "Check `err` Prior To Re-Assignment"
      codelingo/review: 
        comment: "Check the `err` before variable re-assignment."
    name: reassigned-error
    query: |
        import codelingo/ast/go
        go.block_stmt(depth = any):
          go.list:
            @review comment
            go.assign_stmt:
              sibling_order as so1
              go.lhs:
                go.ident:
                  name == "err"
            go.assign_stmt:
              sibling_order as so2
              compareFunc(so1, so2)
              go.lhs:
                go.ident:
                  name == "err"
            exclude:
              go.if_stmt:
                sibling_order as so3 
                threeComparison(so3, so2, so1)
                go.binary_expr(depth = any):
                  go.ident:
                    name == "err"
            exclude:
              go.expr_stmt:
                sibling_order as so4
                threeComparison(so4, so2, so1)
                go.call_expr:
                  go.args:
                    go.ident:
                      name == "err"
