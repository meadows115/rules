funcs:
  - name: isNotValid
    type: asserter
    body: |
      function(varName) {
        return (varName === varName.toUpperCase() && varName.length > 4) || (varName !== "_" && varName.indexOf("_") !== -1) 
      }
  - name: fixName
    type: resolver
    body: |
      function(varName){
        if(varName.indexOf("_") === -1 || varName === "_"){ 
          if(varName === varName.toUpperCase() && varName.length > 4) // variable is ALLCAPS, should be changed to Allcaps
            return varName.charAt(0).toUpperCase() + varName.toLowerCase().substring(1)
          return varName // variable can be all lowercase, mixedCaps or MixedCaps or ALLCAPS with length less than 4 (we do not change acronyms of length 4 or less)
        }
        private = !varName.match(/^[A-Z]/)
        varName = varName.toLowerCase()
        pieces = varName.split("_");
        constName = []
        if(private){
          constName.push(pieces[0])
        }
        else{
          constName.push(pieces[0].charAt(0).toUpperCase() + pieces[0].substring(1))
        }
        for (var i = 1; i < pieces.length; i++) {
          constName.push(pieces[i].charAt(0).toUpperCase() + pieces[i].substring(1))
        }
        return constName.join('')
      }

rules:
  - name:  camel-case-constants
    actions:
      codelingo/review:
        comment: Use MixedCaps or mixedCaps rather than underscores to write multiword constant names. From [Code Review Comments](https://github.com/golang/go/wiki/CodeReviewComments#mixed-caps).
      codelingo/docs:
        title: Camel Case Constants
        body: |    
          Use MixedCaps or mixedCaps rather than underscores to write multiword constant names.
          This applies even when it breaks conventions in other languages. For example, an unexported 
          constant should be maxLength rather than MaxLength or MAX_LENGTH. For an exported constant,
          use MaxLenth. See the godocs for more information (https://golang.org/doc/effective_go.html#mixed-caps).

          ## Bad code
          ```golang
          const ERR_SERVER_OVERLOADED = "Server is currently overloaded. Please retry later"
          ```

          ## Good code
          ```golang
          const ErrServerOverloaded = "Server is currently overloaded. Please retry later"
          ```
    query: |
      import codelingo/ast/go
     
      go.gen_decl(depth = any):
        tok == "const"
        go.value_spec:
          
          go.names:
            @review comment
            @rewrite --replace "{{fixName(varName)}}"
            go.ident:
              name as varName
              isNotValid(varName)

