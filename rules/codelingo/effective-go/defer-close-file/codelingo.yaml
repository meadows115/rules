tenets:
  - name:  defer-close-file
    actions:
      codelingo/docs:
        title: Defer Close File
        body: |
          Deferring a call to a function such as Close has it's advantages. Firstly, it guarantees that 
          you will never forget to close the file, a common mistake if you later edit the function 
          to add a new return path. Secondly, it means that the Close sits near the open of the function, which is clearer 
          than placing it at the end.
          TODO if a function returns the open file, follow it and check if it is closed.

          ## Bad code
          ```golang
          // Contents returns the file's contents as a string but does not defer the function.
          func Contents(filename string) (string, error) {
                ...
          }
          ```
          ## Good code
          ```golang
          // Contents returns the file's contents as a string and defers the function.
          func Contents(filename string) (string, error) {
                ...
              defer f.Close()  // f.Close will run when we're finished.
          }
          ```
      codelingo/review:
        comment: Add `defer {{fileName}}.Close()` after opening the file (`{{fileName}}`). . [as specified in Effective Go](https://golang.org/doc/effective_go.html#defer)
    query: |
      import codelingo/ast/go
      
      go.func_decl(depth = any):
        @review comment
        go.assign_stmt(depth = any):
          go.lhs:
            go.ident:
              sibling_order == 0
              name as fileName
          go.rhs:
            go.call_expr:
              go.selector_expr:
                go.ident:
                  name == "os"
                any_of:
                  go.ident:
                    name == "Open"
                  go.ident:
                    name == "OpenFile"      
        exclude:
          go.return_stmt(depth = any):
            go.results:
              go.ident:
                name == fileName
          go.func_type:
            go.field_list:
              go.field:
                go.names:
                  go.ident:
                    name == fileName
                go.star_expr:
                  go.selector_expr:
                    go.ident:
                      name == "os"
                    go.ident:
                      name == "File"
        exclude:
          go.defer_stmt(depth = any):
            go.call_expr:
              go.selector_expr:
                go.ident:
                  name ==  fileName
                go.ident:
                  name == "Close"     
